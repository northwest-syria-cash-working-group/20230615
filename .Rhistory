geom_col(aes(fill = governorate)) +
geom_text(aes(label = comma(pc_reached)),
hjust = "inward") +
scale_fill_viridis_d(begin = .3) +
labs(title = "Percent of population reached",
subtitle = paste0("as of ", report_date),
y = "",
x = "% of population reached") +
plot_layout(guides = "collect") &
theme(legend.position = "bottom")
ggsave("./img/mpc_by_district.png", dpi = 300, height = 8.27, width = 11.69, units = "in")
eq %>%
left_join(hno %>%
select(governorate = admin1name_en,
district = admin2name_en,
sub_district = admin3name_en,
admin3pcode),
by = "admin3pcode") %>%
filter(admin3pcode %in% nw_pcode3 &
district %in% c("Harim", "Idleb", "Jisr-Ash-Shugur", "Ariha",
"Tell Abiad",
"Afrin", "Jebel Saman", "A'zaz", "Jarablus", "Al Bab")) %>%
group_by(governorate, district) %>%
summarise(wounded_dead = sum(wounded_dead, na.rm = TRUE),
damaged_houses = sum(damaged_houses, na.rm = TRUE)) %>%
# Where is Ariha, and why is it showing up here
filter(district != "Ariha") %>%
left_join(hno %>%
filter(admin3pcode %in% nw_pcode3 &
admin2name_en %in% c("Harim", "Idleb", "Jisr-Ash-Shugur", "Ariha",
"Tell Abiad",
"Afrin", "Jebel Saman", "A'zaz", "Jarablus", "Al Bab")) %>%
group_by(district = admin2name_en) %>%
summarise(population = sum(total_population, na.rm = TRUE)), by = "district") %>%
mutate(wounded_dead_100k = round(wounded_dead / population * 100000, digits = 2),
damaged_houses_100k = round(damaged_houses / population * 100000, digits = 2)) %>%
select(governorate, district, wounded_dead, wounded_dead_100k,
damaged_houses, damaged_houses_100k) %>%
flextable() %>%
theme_zebra() %>%
set_table_properties(layout = "autofit", width = .99) %>%
set_caption("Casualties and damaged houses, absolute figures and per 100,000 persons") %>%
footnote(part = "header", i = 1, j = 3:6, inline = TRUE, ref_symbols = "1",
value = as_paragraph("Data from the Assistance Coordination Unit, Syria 20230328"))
cbr %>%
filter(project_status == "Completed" & previously_assisted == "No") %>%
# Big assumption you're making here, but literally all of them have the word
# "camp" in their names
mutate(village_camps = ifelse(village_camps %in% c("camp", "village") | is.na(village_camps),
village_camps,
"camp")) %>%
group_by(village_camps) %>%
summarise(beneficiaries = sum(beneficiaries)) %>%
replace_na(list(village_camps = "NA")) %>%
mutate(`%_beneficiaries` = round(beneficiaries / sum(beneficiaries) * 100, digits = 2)) %>%
flextable() %>%
set_caption("More than twice as many beneficiaries from villages as from camps") %>%
theme_zebra() %>%
set_table_properties(layout = "autofit", width = .6)
avg_pc_reached <- cbr %>%
mutate(sub_district = recode(sub_district,
"salqin" = "Salqin",
"afrin" = "Afrin")) %>%
filter(project_status == "Completed" &
previously_assisted == "No") %>%
filter(!is.na(admin3pcode)) %>%
group_by(sub_district, admin3pcode, governorate) %>%
summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE),
.groups = "drop") %>%
# I forgot why I was doing this
left_join(hno %>%
filter(admin2name_en %in% c("Harim", "Idleb", "Jisr-Ash-Shugur", "Ariha",
"Tell Abiad",
"Afrin", "Jebel Saman", "A'zaz", "Jarablus", "Al Bab")) %>%
group_by(admin1name_en, admin3pcode) %>%
summarise(total_population = sum(total_population, na.rm = TRUE),
.groups = "drop"),
by = "admin3pcode") %>%
summarise(total_population = sum(total_population, na.rm = TRUE),
beneficiaries = sum(beneficiaries, na.rm = TRUE)) %>%
mutate(avg_pc_reached = round(beneficiaries / total_population * 100, digits = 2)) %>%
pull(avg_pc_reached)
sub_district_order <- cbr %>%
filter(project_status == "Completed" &
previously_assisted == "No") %>%
filter(!is.na(admin3pcode)) %>%
mutate(sub_district = recode(sub_district,
"salqin" = "Salqin",
"afrin" = "Afrin")) %>%
group_by(governorate, sub_district) %>%
summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE),
.groups = "drop") %>%
arrange(desc(beneficiaries)) %>%
arrange(desc(governorate)) %>%
pull(sub_district)
cbr %>%
filter(project_status == "Completed" &
previously_assisted == "No") %>%
filter(!is.na(admin3pcode)) %>%
mutate(sub_district = recode(sub_district,
"salqin" = "Salqin",
"afrin" = "Afrin")) %>%
group_by(governorate, sub_district) %>%
summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE),
.groups = "drop") %>%
ungroup() %>%
mutate(sub_district = factor(sub_district,  sub_district_order),
sub_district = fct_rev(sub_district)) %>%
arrange(sub_district) %>%
ggplot(aes(x = beneficiaries, y = sub_district)) +
geom_col(aes(fill = governorate)) +
geom_text(aes(label = comma(beneficiaries)),
hjust = "inward") +
scale_fill_viridis_d(begin = .3) +
labs(title = "MPC beneficiaries by sub-district",
subtitle = paste0("as of ", report_date),
y = "") +
scale_x_continuous(labels = comma) +
cbr %>%
mutate(sub_district = recode(sub_district,
"salqin" = "Salqin",
"afrin" = "Afrin")) %>%
filter(project_status == "Completed" &
previously_assisted == "No") %>%
filter(!is.na(admin3pcode)) %>%
group_by(sub_district, admin3pcode, governorate) %>%
summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE),
.groups = "drop") %>%
left_join(hno %>%
filter(admin2name_en %in% c("Harim", "Idleb", "Jisr-Ash-Shugur", "Ariha",
"Tell Abiad",
"Afrin", "Jebel Saman", "A'zaz", "Jarablus", "Al Bab")) %>%
group_by(admin1name_en, admin3pcode) %>%
summarise(total_population = sum(total_population, na.rm = TRUE),
.groups = "drop"),
by = "admin3pcode") %>%
mutate(pc_reached = round(beneficiaries / total_population * 100, digits = 1)) %>%
mutate(sub_district = factor(sub_district,  sub_district_order),
sub_district = fct_rev(sub_district)) %>%
arrange(sub_district) %>%
ggplot(aes(x = pc_reached, y = sub_district)) +
geom_col(aes(fill = governorate)) +
geom_text(aes(label = comma(pc_reached)),
hjust = "inward") +
scale_fill_viridis_d(begin = .3) +
labs(title = "Percent of population reached",
subtitle = paste0("as of ", report_date),
y = "",
x = "% of population reached") +
plot_layout(guides = "collect") &
theme(legend.position = "bottom")
ggsave("./img/mpc_by_sub_district.png", dpi = 300, height = 8.27, width = 11.69, units = "in")
eq %>%
left_join(hno %>%
select(governorate = admin1name_en,
district = admin2name_en,
sub_district = admin3name_en,
admin3pcode),
by = "admin3pcode") %>%
filter(admin3pcode %in% nw_pcode3 &
district %in% c("Harim", "Idleb", "Jisr-Ash-Shugur", "Ariha",
"Tell Abiad",
"Afrin", "Jebel Saman", "A'zaz", "Jarablus", "Al Bab")) %>%
group_by(governorate, district, sub_district, admin3pcode) %>%
summarise(wounded_dead = sum(wounded_dead, na.rm = TRUE),
damaged_houses = sum(damaged_houses, na.rm = TRUE)) %>%
left_join(hno %>%
filter(admin3pcode %in% nw_pcode3 &
admin2name_en %in% c("Harim", "Idleb", "Jisr-Ash-Shugur", "Ariha",
"Tell Abiad",
"Afrin", "Jebel Saman", "A'zaz", "Jarablus", "Al Bab")) %>%
group_by(admin3pcode) %>%
summarise(population = sum(total_population, na.rm = TRUE)),
by = "admin3pcode") %>%
mutate(wounded_dead_100k = round(wounded_dead / population * 100000, digits = 2),
damaged_houses_100k = round(damaged_houses / population * 100000, digits = 2)) %>%
left_join(cbr %>%
filter(project_status == "Completed" &
previously_assisted == "No") %>%
group_by(admin3pcode) %>%
summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE)),
by = "admin3pcode") %>%
ggplot(aes(x = population, y = beneficiaries)) +
geom_point(aes(size = wounded_dead_100k)) +
geom_text_repel(aes(label = sub_district),
point.padding = .5,
segment.color = "grey50", size = 3) +
scale_x_log10(breaks = c(0, 3000, 10000, 30000, 100000, 300000, 1000000),
labels = comma) +
scale_y_log10(breaks = c(0, 1000, 3000, 10000, 30000, 100000),
labels = comma) +
scale_size(breaks = c(0, 100, 500, 1000, 3000)) +
geom_smooth(method = "lm", se = FALSE, colour = "blue", size = .5) +
labs(title = "Population and MPC beneficiaries by sub-district",
subtitle = "Size indicates dead/wounded per 100,0000",
x = "Population",
y = "Beneficiaries",
size = "Dead/wounded\nper 100k",
caption = "Data from CWG, FSL and ACU") +
theme(plot.caption = element_text(hjust = .5))
ggsave("./img/pop_ben_scatter.png", dpi = 300, height = 8.27, width = 11.69, units = "in")
eq %>%
left_join(hno %>%
select(governorate = admin1name_en,
district = admin2name_en,
sub_district = admin3name_en,
admin3pcode),
by = "admin3pcode") %>%
filter(admin3pcode %in% nw_pcode3 &
district %in% c("Harim", "Idleb", "Jisr-Ash-Shugur", "Ariha",
"Tell Abiad",
"Afrin", "Jebel Saman", "A'zaz", "Jarablus", "Al Bab")) %>%
group_by(governorate, district, sub_district, admin3pcode) %>%
summarise(wounded_dead = sum(wounded_dead, na.rm = TRUE),
damaged_houses = sum(damaged_houses, na.rm = TRUE)) %>%
left_join(hno %>%
filter(admin3pcode %in% nw_pcode3 |
admin2name_en %in% c("Harim", "Idleb", "Jisr-Ash-Shugur", "Ariha",
"Tell Abiad",
"Afrin", "Jebel Saman", "A'zaz", "Jarablus", "Al Bab")) %>%
group_by(admin3pcode) %>%
summarise(population = sum(total_population, na.rm = TRUE)),
by = "admin3pcode") %>%
mutate(wounded_dead_100k = round(wounded_dead / population * 100000, digits = 2),
damaged_houses_100k = round(damaged_houses / population * 100000, digits = 2)) %>%
left_join(cbr %>%
filter(project_status == "Completed" &
previously_assisted == "No") %>%
group_by(admin3pcode) %>%
summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE)),
by = "admin3pcode") %>%
ggplot(aes(x = damaged_houses_100k, y = wounded_dead_100k)) +
geom_point(aes(size = damaged_houses,
colour = beneficiaries)) +
geom_text_repel(aes(label = sub_district),
point.padding = .5,
segment.color = "grey50", size = 3) +
scale_x_log10(labels = comma) +
scale_y_log10(labels = comma) +
scale_colour_viridis(option = "mako", direction = -1,
labels = comma,
breaks = c(1000, 20000, 50000, 75000, 95000)) +
scale_size(breaks = c(0, 100, 500, 1000, 3000)) +
labs(x = "Damaged houses per 100k",
y = "Wounded and dead per 100k",
title = "Intensity of earthquake impacts by sub-district",
subtitle = "Size shows number of damaged houses and colour shows beneficiaries",
size = "Damaged\nhouses",
colour = "Beneficiaries",
caption = "Data from CWG, FSL and ACU") +
theme(plot.caption = element_text(hjust = .5))
ggsave("./img/earthquake_impact_scatter.png", dpi = 300, height = 8.27, width = 11.69, units = "in")
cbr %>%
filter(project_status == "Planned") %>%
filter(governorate == "Aleppo") %>%
group_by(sub_district) %>%
summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE)) %>%
filter(beneficiaries > 0) %>%
ggplot(aes(x = beneficiaries, y = fct_reorder(sub_district, beneficiaries))) +
geom_col(fill = "#41b6c4") +
geom_text(aes(label = comma(beneficiaries)), hjust = "inward") +
scale_x_continuous(labels = unit_format(unit = "K", scale = 1e-3, accuracy = 1)) +
labs(title = "Planned beneficiaries -- Aleppo",
x = "",
y = "") +
cbr %>%
filter(project_status == "Planned") %>%
filter(governorate == "Idleb" & !is.na(admin3pcode)) %>%
group_by(sub_district) %>%
summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE)) %>%
filter(beneficiaries > 0) %>%
ggplot(aes(x = beneficiaries, y = fct_reorder(sub_district, beneficiaries))) +
geom_col(fill = "lightgoldenrod") +
geom_text(aes(label = comma(beneficiaries)), hjust = "inward") +
scale_x_continuous(labels = unit_format(unit = "K", scale = 1e-3, accuracy = 1)) +
labs(title = "Planned beneficiaries -- Idleb",
x = "Planned beneficiaries",
y = "")  +
plot_layout(widths = c(1.15, 1))
ggsave("./img/planned_by_sub_district.png", dpi = 300, height = 8.27, width = 11.69, units = "in")
cbr %>%
filter(previously_assisted == "No") %>%
group_by(project_status) %>%
summarise(partners = n_distinct(implementing_partner),
beneficiaries = sum(beneficiaries, na.rm = TRUE)) %>%
mutate(`%_beneficiaries` = round(beneficiaries / sum(beneficiaries) * 100, digits = 2)) %>%
flextable() %>%
set_caption("14 partners have reported planned activities") %>%
theme_zebra() %>%
set_table_properties(layout = "autofit", width = .6)
cbr %>%
filter(project_status == "Planned") %>%
mutate(month = month(end_date, label = TRUE),
month = as.character(month)) %>%
group_by(month) %>%
summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE)) %>%
mutate(month = ifelse(is.na(month), "NA", month),
month = factor(month, c("Apr", "May", "Jun", "Jul", "Aug", "Sep",
"Oct", "Nov", "Dec", "NA"))) %>%
arrange(month) %>%
flextable() %>%
theme_zebra() %>%
set_caption("Planned beneficiaries by month") %>%
footnote(i = 1, j = 1, inline = TRUE, ref_symbols = "1", part = "header",
value = as_paragraph("Some dates are missing or improperly encoded")) %>%
set_table_properties(layout = "autofit", width = .5)
cbr %>%
filter(project_status == "Completed") %>%
group_by(implementing_partner) %>%
summarise(beneficiary_freq = sum(beneficiaries, na.rm = TRUE),
districts = n_distinct(admin2pcode),
communities = n_distinct(admin4pcode)) %>%
arrange(desc(beneficiary_freq)) %>%
flextable() %>%
set_caption("Reach and footprint of cash response actors") %>%
theme_zebra() %>%
set_table_properties(layout = "autofit", width = .99) %>%
footnote(as_paragraph("Only partners who provided more than USD 100/family/month"),
i = 1, j = 1, part = "header", inline = TRUE, ref_symbols = "1")
partner_scatter <- cbr %>%
filter(project_status == "Completed") %>%
group_by(implementing_partner) %>%
summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE),
communities = n_distinct(admin4pcode)) %>%
ggplot(aes(x = beneficiaries, y = communities)) +
geom_point(aes(size = beneficiaries,
text = paste0(implementing_partner, "\n",
"beneficiary_freq: ", format(beneficiaries, big.mark = ","), "\n",
"communities: ", communities))) +
scale_x_log10(labels = comma) +
theme(legend.position = "none") +
labs(x = "Beneficiary frequencies reached",
y = "Communities (admin4) reached",
title = "Implementing partners -- beneficiary frequencies and communities reached")
ggplotly(partner_scatter, tooltip = c("text")) %>%
layout(showlegend = TRUE, legend = list(font = (list(size = 6)))) %>%
plotly::style(hoveron = "point") %>%
layout(title = list(text = paste0("Beneficiaries and communities reached",
"<br>",
"<sup>",
"Cash response implementing partners; mouse over for details","</sup>")))
cbr %>%
filter(project_status == "Completed") %>%
group_by(implementing_partner) %>%
summarise(total_usd = sum(total_usd, na.rm = TRUE),
families = sum(families, na.rm = TRUE)) %>%
mutate(usd_per_fam = round(total_usd / families, digits = 2),
`%_usd_total` = round(total_usd / sum(total_usd) * 100,
digits = 2),
total_usd = round(total_usd)) %>%
arrange(desc(total_usd)) %>%
flextable() %>%
set_caption("Cash disbursed and families reached by partner") %>%
theme_zebra() %>%
flextable::set_table_properties(layout = "autofit", width = .99)
currency_table <- cbr %>%
filter(project_status == "Completed") %>%
group_by(currency) %>%
summarise(total_usd = sum(total_usd, na.rm = TRUE)) %>%
# doing this entirely for rounding reasons, because of
# FX stuff, there's one extra dollar
mutate(total_usd = ifelse(currency == "USD", total_usd - 1, total_usd)) %>%
mutate(pc_total = round(total_usd / sum(total_usd) * 100,
digits = 2))
currency_table %>%
rename(`%_of_total` = pc_total) %>%
adorn_totals("row") %>%
flextable() %>%
theme_zebra() %>%
set_caption("Proportion of cash disbursed by currency") %>%
set_table_properties(layout = "autofit", width = .6)
eq %>%
left_join(locations %>% distinct(admin3pcode,
sub_district = admin3name_en,
district = admin2name_en,
governorate = admin1name_en),
by = "admin3pcode") %>%
left_join(cbr %>%
filter(project_status == "Completed") %>%
group_by(admin3pcode) %>%
summarise(beneficiaries = sum(beneficiaries[previously_assisted == "No"],
na.rm = TRUE),
total_usd = sum(total_usd, na.rm = TRUE)),
by = "admin3pcode") %>%
select(governorate, district, sub_district,
total_population,
beneficiaries, total_usd,
wounded_dead, wounded_dead_100k,
damaged_houses, damaged_houses_100k,
admin3pcode) %>%
datatable(options = list(pageLength = 10, scrollX = TRUE),
filter = list(position = "top", clear = FALSE),
caption = htmltools::tags$caption(style = 'caption-side: top;
text-align: center; font-size:120% ;',
"Reference table -- Earthquake impacts, from ACU, extracted 20230328")) %>%
formatStyle(0, target = "row", lineHeight = "80%", fontSize = "80%") %>%
formatRound(c("wounded_dead_100k", "damaged_houses_100k"), digits = 2) %>%
formatCurrency(c("total_population",
"wounded_dead", "damaged_houses",
"beneficiaries", "total_usd"),
currency = "", interval = 3, mark = ",") %>%
formatRound(c("total_population",
"wounded_dead", "damaged_houses",
"beneficiaries", "total_usd"), digits = 0)
month_reporting <- cbr %>%
group_by(month = month(end_date)) %>%
summarise(partners = n_distinct(implementing_partner))
knitr::opts_chunk$set(echo = FALSE, fig.width=9, message = FALSE, warning=FALSE)
library(tidyverse)
library(readxl)
library(lubridate)
library(stringi)
library(janitor)
library(scales)
library(viridis)
library(patchwork)
library(DT)
library(here)
library(sf)
library(plotly)
library(flextable)
library(mdepriv)
library(ggrepel)
library(anytime)
library(tidytext)
theme_set(theme_light())
# disabling scientific notation
options(scipen = 100)
`%out%` <- Negate(`%in%`)
# function for transposing df
transpose_df <- function(df) {
t_df <- data.table::transpose(df)
colnames(t_df) <- rownames(df)
rownames(t_df) <- colnames(df)
t_df <- t_df %>%
tibble::rownames_to_column(.data = .) %>%
tibble::as_tibble(.)
return(t_df)
}
# scaling functions
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
range_wna <- function(x){(x-min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE))}
# mode function
mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
locations <- read_csv("./data/locations_aoc.csv")
pcode3_shape <-
st_read("./data/syr_admbnda_uncs_unocha_20201217/syr_admbnda_adm3_uncs_unocha_20201217.shp")
```
cbr %>%
filter(!is.na(end_date)) %>%
mutate(end_date = anydate(end_date)) %>%
filter(project_status == "Completed" &
previously_assisted == "No") %>%
group_by(end_date) %>%
summarise(beneficiaries = sum(beneficiaries)) %>%
arrange(end_date) %>%
filter(end_date  > "2022-12-30" & end_date < progress_max_date) %>%
# Run chunk up to here to check when the last
# distribution was in the dataset
mutate(cum_ben = cumsum(beneficiaries))
# This is the messiest chunk in the whole document. Can you please fix it?
progress_max_date <- "2023-06-15"
progress_line <- cbr %>%
filter(!is.na(end_date)) %>%
mutate(end_date = anydate(end_date)) %>%
filter(project_status == "Completed" &
previously_assisted == "No") %>%
group_by(end_date) %>%
summarise(beneficiaries = sum(beneficiaries)) %>%
arrange(end_date) %>%
filter(end_date  > "2022-12-30" & end_date < progress_max_date) %>%
# Run chunk up to here to check when the last
# distribution was in the dataset
mutate(cum_ben = cumsum(beneficiaries)) %>%
# Spaced at roughly every 15 days,
# Although some days do not have distributions
mutate(cum_label = ifelse(end_date == "2023-02-10" |
end_date == "2023-03-01" |
end_date == "2023-03-15" |
end_date == "2023-03-30"|
end_date == "2023-04-15"|
end_date == "2023-04-30"|
end_date == "2023-05-24"|
end_date == "2023-06-11",
cum_ben, ""),
cum_label = as.numeric(cum_label),
end_date = anydate(end_date))
progress_line %>%
ggplot(aes(x = end_date, y = cum_ben)) +
geom_line(colour = "blue") +
geom_text(aes(label = scales::comma(cum_label)), vjust = -1,
size = 4) +
# Scale this down to "1 month" when the axis gets too crowded,
# Then you can just leave the date_label as "%b"
scale_x_date(date_breaks = "2 weeks", date_labels = "%d-%b") +
# Why didn't you learn this before?
scale_y_continuous(labels = comma, expand = expansion(mult = .1)) +
labs(x = "Distribution date",
y = "Cumulative beneficiaries",
title = "MPC progress by date",
# We can probably alter the subtitle sooner of later,
# since earthquake reporting is becoming
# less and less important
subtitle = paste0("The earliest earthquake-related distribution was 09 Feb 2023\nExcludes ",
format(sum_stats %>% pull(beneficiaries) -
max(progress_line$cum_label, na.rm = TRUE), big.mark = ","),
" beneficiaries for which activity end date was after ",
report_date))
ggsave("./img/progress_line.png", dpi = 300, height = 8.27, width = 11.69, units = "in")
